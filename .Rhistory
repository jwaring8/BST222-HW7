knitr::opts_chunk$set(echo = FALSE)
library(gridExtra)
library(tidyr)
library(ggplot2)
library(latex2exp)
n <- c(10, 100, 1000, 10000)
lambda <- 1.2
num_sims <- 1000
#MLE
MLEs <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
MLEs[[i,j]] <- 1/mean(rexp(n[i], lambda))
}
}
MLEs <- data.frame(t(MLEs))
p1<- ggplot(data=MLEs, aes(x=X1)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MLEs, n=10", x=TeX("$\\hat{\\lambda}_{MLE}"), y="Frequency")+
geom_vline(xintercept = 1.2, col="orange",size=2)
p2<- ggplot(data=MLEs, aes(x=X2)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MLEs, n=100", x=TeX("$\\hat{\\lambda}_{MLE}"), y="Frequency")+
geom_vline(xintercept = 1.2, col="orange",size=2)
p3<- ggplot(data=MLEs, aes(x=X3)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MLEs, n=1000", x=TeX("$\\hat{\\lambda}_{MLE}"), y="Frequency")+
geom_vline(xintercept = 1.2, col="orange",size=2)
p4<- ggplot(data=MLEs, aes(x=X4)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MLEs, n=10000", x=TeX("$\\hat{\\lambda}_{MLE}"), y="Frequency")+
geom_vline(xintercept = 1.2, col="orange",size=2)
##MOM
MOM <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
MOM[[i,j]] <- sqrt(2*n[i]/(sum((rexp(n[i], lambda)^2))))
}
}
MOM <- data.frame(t(MOM))
MOMp1<- ggplot(data=MOM, aes(x=X1)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MOM, n=10", x=TeX("$\\hat{\\lambda}_{2MOM}"), y="Frequency") +
geom_vline(xintercept = 1.2, col="orange",size=2)
MOMp2<- ggplot(data=MOM, aes(x=X2)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MOMs, n=100", x=TeX("$\\hat{\\lambda}_{2MOM}"), y="Frequency") +
geom_vline(xintercept = 1.2, col="orange",size=2)
MOMp3<- ggplot(data=MOM, aes(x=X3)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MOMs, n=1000", x=TeX("$\\hat{\\lambda}_{2MOM}"), y="Frequency") +
geom_vline(xintercept = 1.2, col="orange",size=2)
MOMp4<- ggplot(data=MOM, aes(x=X4)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MOMs, n=10000", x=TeX("$\\hat{\\lambda}_{2MOM}"), y="Frequency") +
geom_vline(xintercept = 1.2, col="orange",size=2)
##ME
ME <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
ME[i,j] <- log(2)/median(rexp(n[i], lambda))
}
}
ME <- data.frame(t(ME))
MEp1<- ggplot(data=ME, aes(x=X1)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MEs, n=10", x=TeX("$\\hat{\\lambda}_{ME}"), y="Frequency") +
geom_vline(xintercept = 1.2, col="orange",size=2)
MEp2<- ggplot(data=ME, aes(x=X2)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MEs, n=100", x=TeX("$\\hat{\\lambda}_{ME}"), y="Frequency") +
geom_vline(xintercept = 1.2, col="orange",size=2)
MEp3<- ggplot(data=ME, aes(x=X3)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MEs, n=1000", x=TeX("$\\hat{\\lambda}_{ME}"), y="Frequency") +
geom_vline(xintercept = 1.2, col="orange",size=2)
MEp4<- ggplot(data=ME, aes(x=X4)) +
geom_histogram(color="black", fill="dodgerblue", alpha = 0.7, bins=15) +
labs(title="MEs, n=10000", x=TeX("$\\hat{\\lambda}_{ME}"), y="Frequency") +
geom_vline(xintercept = 1.2, col="orange",size=2)
grid.arrange(p1,p2,p3,p4,MOMp1,MOMp2,MOMp3,MOMp4,MEp1,MEp2,MEp3,MEp4, ncol=4)
library(gridExtra)
library(tidyr)
n <- c(50, 100, 1000, 10000)
lambdas <- seq(0.01,5,by=0.2)
num_sims <- 1000
#MLE
##output a MLE bias list for each lambda input
biasMLEList<-function(lambda){
MLEs <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
MLEs[[i,j]] <- 1/mean(rexp(n[i], lambda))
}
}
##the bias of the estimator= expected lambda hat - true lambda
biasMLE<-matrix(apply(MLEs,1,mean)-lambda)
return(biasMLE)
}
##output a MLE MSE list for each lambda input
mseMLEList<-function(lambda){
MLEs <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
MLEs[[i,j]] <- 1/mean(rexp(n[i], lambda))
}
}
#the bias of the estimator= expected lambda hat - true lambda
biasMLE<-matrix(apply(MLEs,1,mean)-lambda)
#the MSE of the estimator=  variance + bias^2
mseMLE<-matrix(apply(MLEs,1,var)) + biasMLE^2
return(mseMLE)
}
##calculate biases for all different true parameter lambda
biasMLE=matrix(nrow=length(n), ncol=length(lambdas))
for (i in 1:length(lambdas)){
lam<-lambdas[i]
biasMLE[,i]<-biasMLEList(lambda=lam)
}
biasMLE<-rbind(biasMLE,lambdas)
tbiasMLE<-t(biasMLE)
colnames(tbiasMLE)<-c(n,"lambda")
tbiasMLE_L <- gather(as.data.frame(tbiasMLE), sampleN, bias, "50":"10000", factor_key=TRUE)
##calculate MSE for all different true parameter lambda for MOM
mseMLE=matrix(nrow=length(n), ncol=length(lambdas))
for (i in 1:length(lambdas)){
lam<-lambdas[i]
mseMLE[,i]<-mseMLEList(lambda=lam)
}
mseMLE<-rbind(mseMLE,lambdas)
tmseMLE<-t(mseMLE)
colnames(tmseMLE)<-c(n,"lambda")
tmseMLE_L <- gather(as.data.frame(tmseMLE), sampleN, mse, "50":"10000", factor_key=TRUE)
#MOM
##output a MOM bias list for each lambda input
biasMOMList<-function(lambda){
MOM <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
MOM[i,j] <-  sqrt(2*n[i]/(sum((rexp(n[i], lambda)^2))))
}
}
##the bias of the estimator= expected lambda hat - true lambda
biasMOM<-matrix(apply(MOM,1,mean)-lambda)
return(biasMOM)
}
##output a MOM MSE list for each lambda input
mseMOMList<-function(lambda){
MOM <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
MOM[i,j] <- sqrt(2*n[i]/(sum((rexp(n[i], lambda)^2))))
}
}
#the bias of the estimator= expected lambda hat - true lambda
biasMOM<-matrix(apply(MOM,1,mean)-lambda)
#the MSE of the estimator=  variance + bias^2
mseMOM<-matrix(apply(MOM,1,var)) + biasMOM^2
return(mseMOM)
}
##calculate biases for all different true parameter lambda
biasMOM=matrix(nrow=length(n), ncol=length(lambdas))
for (i in 1:length(lambdas)){
lam<-lambdas[i]
biasMOM[,i]<-biasMOMList(lambda=lam)
}
biasMOM<-rbind(biasMOM,lambdas)
tbiasMOM<-t(biasMOM)
colnames(tbiasMOM)<-c(n,"lambda")
tbiasM_L <- gather(as.data.frame(tbiasMOM), sampleN, bias, "50":"10000", factor_key=TRUE)
##calculate MSE for all different true parameter lambda for MOM
mseM=matrix(nrow=length(n), ncol=length(lambdas))
for (i in 1:length(lambdas)){
lam<-lambdas[i]
mseM[,i]<-mseMOMList(lambda=lam)
}
mseM<-rbind(mseM,lambdas)
tmseM<-t(mseM)
colnames(tmseM)<-c(n,"lambda")
tmseM_L <- gather(as.data.frame(tmseM), sampleN, mse, "50":"10000", factor_key=TRUE)
#ME
##output a ME bias list for each lambda input
biasMEList<-function(lambda){
ME <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
ME[i,j] <- log(2)/median(rexp(n[i], lambda))
}
}
##the bias of the estimator= expected lambda hat - true lambda
biasME<-matrix(apply(ME,1,mean)-lambda)
return(biasME)
}
##output a MOM MSE list for each lambda input
mseMEList<-function(lambda){
ME <- matrix(data = NA, length(n), num_sims)
for (i in 1:length(n)){
for (j in 1:num_sims) {
ME[i,j] <- log(2)/median(rexp(n[i], lambda))
}
}
#the bias of the estimator= expected lambda hat - true lambda
biasME<-matrix(apply(ME,1,mean)-lambda)
#the MSE of the estimator=  variance + bias^2
mseME<-matrix(apply(ME,1,var)) + biasME^2
return(mseME)
}
##calculate biases for all different true parameter lambda
biasME=matrix(nrow=length(n), ncol=length(lambdas))
for (i in 1:length(lambdas)){
lam<-lambdas[i]
biasME[,i]<-biasMEList(lambda=lam)
}
biasME<-rbind(biasME,lambdas)
tbiasME<-t(biasME)
colnames(tbiasME)<-c(n,"lambda")
tbiasME_L <- gather(as.data.frame(tbiasME), sampleN, bias, "50":"10000", factor_key=TRUE)
##calculate MSE for all different true parameter lambda for MOM
mseME=matrix(nrow=length(n), ncol=length(lambdas))
for (i in 1:length(lambdas)){
lam<-lambdas[i]
mseME[,i]<-mseMEList(lambda=lam)
}
mseME<-rbind(mseME,lambdas)
tmseME<-t(mseME)
colnames(tmseME)<-c(n,"lambda")
tmseME_L <- gather(as.data.frame(tmseME), sampleN, mse, "50":"10000", factor_key=TRUE)
#plot all
biasMLEp <- ggplot(tbiasMLE_L, aes(x=lambda, y=bias, color=sampleN, group= sampleN)) +
geom_point()+ geom_line()+
labs(x=TeX("$\\lambda$"), y=TeX("Bias($\\hat{\\lambda}$)"), title="MLE Bias", color="Sample Size") +
ylim(0,0.2)
mseMLEp <- ggplot(tmseMLE_L, aes(x=lambda, y=mse, color=sampleN, group= sampleN)) +
geom_point()+ geom_line()+
labs(x=TeX("$\\lambda$"), y=TeX("MSE($\\hat{\\lambda}$)"), title="MLE MSE", color="Sample Size") +
ylim(0,1)
biasMOMp <- ggplot(tbiasM_L, aes(x=lambda, y=bias, color=sampleN, group= sampleN)) +
geom_point()+ geom_line()+
labs(x=TeX("$\\lambda$"), y=TeX("Bias($\\hat{\\lambda}$)"), title="2MOM Bias", color="Sample Size") +
ylim(0,0.2)
mseMOMp <- ggplot(tmseM_L, aes(x=lambda, y=mse, color=sampleN, group= sampleN)) +
geom_point()+ geom_line()+
labs(x=TeX("$\\lambda$"), y=TeX("MSE($\\hat{\\lambda}$)"), title="2MOM MSE", color="Sample Size") +
ylim(0,1)
biasMEp <- ggplot(tbiasME_L, aes(x=lambda, y=bias, color=sampleN, group= sampleN)) +
geom_point()+ geom_line()+
labs(x=TeX("$\\lambda$"), y=TeX("Bias($\\hat{\\lambda}$)"), title="ME Bias", color="Sample Size") +
ylim(0,0.2)
mseMEp <- ggplot(tmseME_L, aes(x=lambda, y=mse, color=sampleN, group= sampleN)) +
geom_point()+ geom_line()+
labs(x=TeX("$\\lambda$"), y=TeX("MSE($\\hat{\\lambda}$)"), title="ME MSE", color="Sample Size") +
ylim(0,1)
grid.arrange(biasMLEp,mseMLEp,biasMOMp,mseMOMp,biasMEp,mseMEp,ncol=2)
setwd("~/Harvard/Fall 2018/BST 222/Homework/Homework 7")
